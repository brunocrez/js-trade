{"version":3,"sources":["../../app-es6/services/TradeService.js"],"names":["Trade","TradeDao","HttpService","ConnectionFactory","TradeService","_http","Promise","resolve","reject","get","then","trades","map","Date","item","date","quantity","value","catch","console","log","err","all","getTradesOnWeek","getTradesOnLastWeek","getTradesOnLastFourteenDays","flatArray","array","reduce","newArr","arr","concat","Error","trade","getConn","conn","obj","save","listAll","clearAll","currentList","getAllTrades","tradeList","filter","some","JSON","stringify","existingItem"],"mappings":"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","file":"TradeService.js","sourcesContent":["import { Trade } from '../models/Trade';\r\nimport { TradeDao } from '../database/TradeDao';\r\nimport { HttpService } from '../services/HttpService';\r\nimport { ConnectionFactory } from '../services/ConnectionFactory';\r\n\r\nexport class TradeService {\r\n\r\n    constructor() {\r\n        this._http = new HttpService();\r\n    }\r\n\r\n    getTradesOnWeek() {\r\n        return new Promise((resolve, reject) => {\r\n            this._http.get('http://localhost:3000/week')\r\n                .then(trades => {\r\n                    resolve(trades.map(item => new Trade(new Date(item.date), item.quantity, item.value)));\r\n                })\r\n                .catch(err => {\r\n                    console.log(err);\r\n                    reject('Error: Cannot GET trades from this week!');\r\n                })\r\n        });\r\n    }\r\n\r\n    getTradesOnLastWeek() {\r\n        return new Promise((resolve, reject) => {\r\n            this._http.get('http://localhost:3000/lastweek')\r\n                .then(trades => {\r\n                    resolve(trades.map(item => new Trade(new Date(item.date), item.quantity, item.value)));\r\n                })\r\n                .catch(err => {\r\n                    console.log(err);\r\n                    reject('Error: Cannot GET trades from last week!');\r\n                })\r\n        });\r\n    }\r\n\r\n    getTradesOnLastFourteenDays() {\r\n        return new Promise((resolve, reject) => {\r\n            this._http.get('http://localhost:3000/twoweeksago')\r\n                .then(trades => {\r\n                    resolve(trades.map(item => new Trade(new Date(item.date), item.quantity, item.value)));\r\n                })\r\n                .catch(err => {\r\n                    console.log(err);\r\n                    reject('Error: Cannot GET trades from two weeks ago!');\r\n                })\r\n        });\r\n    }\r\n\r\n    getAllTrades() {\r\n        return Promise.all([\r\n                this.getTradesOnWeek(),\r\n                this.getTradesOnLastWeek(),\r\n                this.getTradesOnLastFourteenDays()\r\n            ])\r\n            .then(array => {\r\n                let flatArray = array\r\n                    .reduce((newArr, arr) => newArr.concat(arr), [])\r\n\r\n                return flatArray;\r\n            })\r\n            .catch(err => { throw new Error(err) });\r\n\r\n    }\r\n\r\n    addTrade(trade) {\r\n        return ConnectionFactory.getConn()\r\n            .then(conn => new TradeDao(conn))\r\n            .then(obj => obj.save(trade))\r\n            .then(() => 'Trade Added Successfully!')\r\n            .catch(err => {\r\n                console.log(err);\r\n                throw new Error('Something went wrong trying to create new Trade!');\r\n            });\r\n    }\r\n\r\n    listAllTrades() {\r\n        return ConnectionFactory.getConn()\r\n            .then(conn => new TradeDao(conn))\r\n            .then(obj => obj.listAll())\r\n            .catch(err => {\r\n                console.log(err);\r\n                throw new Error('Something went wrong trying to list Trades!');\r\n            });\r\n    }\r\n\r\n    clearAllTrades() {\r\n        return ConnectionFactory.getConn()\r\n            .then(conn => new TradeDao(conn))\r\n            .then(obj => obj.clearAll())\r\n            .catch(err => {\r\n                console.log(err);\r\n                throw new Error('Something went wrong trying to clear Trades!');\r\n            });\r\n    }\r\n\r\n    importTrades(currentList) {\r\n        return this.getAllTrades()\r\n            .then(tradeList => tradeList.filter(item =>\r\n                !currentList.some(existingItem =>\r\n                    JSON.stringify(existingItem) == JSON.stringify(item))))\r\n            .catch(err => {\r\n                console.log(err);\r\n                throw new Error('Something went wrong trying to import Trades!')\r\n            });\r\n    }\r\n}"]}