{"version":3,"sources":["../../app-es6/services/TradeService.js"],"names":["TradeService","_http","HttpService","Promise","resolve","reject","get","then","trades","map","Trade","Date","item","date","quantity","value","catch","console","log","err","all","getTradesOnWeek","getTradesOnLastWeek","getTradesOnLastFourteenDays","flatArray","array","reduce","newArr","arr","concat","Error","trade","ConnectionFactory","getConn","TradeDao","conn","obj","save","listAll","clearAll","currentList","getAllTrades","tradeList","filter","some","JSON","stringify","existingItem"],"mappings":"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","file":"TradeService.js","sourcesContent":["class TradeService {\r\n\r\n    constructor() {\r\n        this._http = new HttpService();\r\n    }\r\n\r\n    getTradesOnWeek() {\r\n        return new Promise((resolve, reject) => {\r\n            this._http.get('http://localhost:3000/week')\r\n                .then(trades => {\r\n                    resolve(trades.map(item => new Trade(new Date(item.date), item.quantity, item.value)));\r\n                })\r\n                .catch(err => {\r\n                    console.log(err);\r\n                    reject('Error: Cannot GET trades from this week!');\r\n                })\r\n        });\r\n    }\r\n\r\n    getTradesOnLastWeek() {\r\n        return new Promise((resolve, reject) => {\r\n            this._http.get('http://localhost:3000/lastweek')\r\n                .then(trades => {\r\n                    resolve(trades.map(item => new Trade(new Date(item.date), item.quantity, item.value)));\r\n                })\r\n                .catch(err => {\r\n                    console.log(err);\r\n                    reject('Error: Cannot GET trades from last week!');\r\n                })\r\n        });\r\n    }\r\n\r\n    getTradesOnLastFourteenDays() {\r\n        return new Promise((resolve, reject) => {\r\n            this._http.get('http://localhost:3000/twoweeksago')\r\n                .then(trades => {\r\n                    resolve(trades.map(item => new Trade(new Date(item.date), item.quantity, item.value)));\r\n                })\r\n                .catch(err => {\r\n                    console.log(err);\r\n                    reject('Error: Cannot GET trades from two weeks ago!');\r\n                })\r\n        });\r\n    }\r\n\r\n    getAllTrades() {\r\n        return Promise.all([\r\n                this.getTradesOnWeek(),\r\n                this.getTradesOnLastWeek(),\r\n                this.getTradesOnLastFourteenDays()\r\n            ])\r\n            .then(array => {\r\n                let flatArray = array\r\n                    .reduce((newArr, arr) => newArr.concat(arr), [])\r\n\r\n                return flatArray;\r\n            })\r\n            .catch(err => { throw new Error(err) });\r\n\r\n    }\r\n\r\n    addTrade(trade) {\r\n        return ConnectionFactory.getConn()\r\n            .then(conn => new TradeDao(conn))\r\n            .then(obj => obj.save(trade))\r\n            .then(() => 'Trade Added Successfully!')\r\n            .catch(err => {\r\n                console.log(err);\r\n                throw new Error('Something went wrong trying to create new Trade!');\r\n            });\r\n    }\r\n\r\n    listAllTrades() {\r\n        return ConnectionFactory.getConn()\r\n            .then(conn => new TradeDao(conn))\r\n            .then(obj => obj.listAll())\r\n            .catch(err => {\r\n                console.log(err);\r\n                throw new Error('Something went wrong trying to list Trades!');\r\n            });\r\n    }\r\n\r\n    clearAllTrades() {\r\n        return ConnectionFactory.getConn()\r\n            .then(conn => new TradeDao(conn))\r\n            .then(obj => obj.clearAll())\r\n            .catch(err => {\r\n                console.log(err);\r\n                throw new Error('Something went wrong trying to clear Trades!');\r\n            });\r\n    }\r\n\r\n    importTrades(currentList) {\r\n        return this.getAllTrades()\r\n            .then(tradeList => tradeList.filter(item =>\r\n                !currentList.some(existingItem =>\r\n                    JSON.stringify(existingItem) == JSON.stringify(item))))\r\n            .catch(err => {\r\n                console.log(err);\r\n                throw new Error('Something went wrong trying to import Trades!')\r\n            });\r\n    }\r\n}"]}