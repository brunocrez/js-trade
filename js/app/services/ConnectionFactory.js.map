{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["ConnectionFactory","database_stores","database_version","database_name","connection","closeConnection","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStore","event","target","result","onsuccess","close","bind","onerror","console","log","error","name","conn","forEach","objectStoreNames","contains","item","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;AAAA,IAAIA,oBAAqB,YAAW;;AAEhC,QAAMC,kBAAkB,CAAC,QAAD,CAAxB;AACA,QAAMC,mBAAmB,CAAzB;AACA,QAAMC,gBAAgB,cAAtB;;AAEA,QAAIC,aAAa,IAAjB;AACA,QAAIC,kBAAkB,IAAtB;;AAEA;AAEI,qCAAc;AAAA;;AACV,kBAAM,IAAIC,KAAJ,CAAU,4CAAV,CAAN;AACH;;AAJL;AAAA;AAAA,sCAMqB;AACb,uBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,wBAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBV,aAAtB,EAAqCD,gBAArC,CAAlB;;AAEAQ,gCAAYI,eAAZ,GAA8B,iBAAS;AACnCd,0CAAkBe,YAAlB,CAA+BC,MAAMC,MAAN,CAAaC,MAA5C;AACH,qBAFD;;AAIAR,gCAAYS,SAAZ,GAAwB,iBAAS;AAC7B,4BAAI,CAACf,UAAL,EAAiB;AACbA,yCAAaY,MAAMC,MAAN,CAAaC,MAA1B;AACAb,8CAAkBD,WAAWgB,KAAX,CAAiBC,IAAjB,CAAsBjB,UAAtB,CAAlB;AACAA,uCAAWgB,KAAX,GAAmB,YAAW;AAC1B,sCAAM,IAAId,KAAJ,CAAU,0BAAV,CAAN;AACH,6BAFD;AAGH;;AAEDE,gCAAQJ,UAAR;AACH,qBAVD;;AAYAM,gCAAYY,OAAZ,GAAsB,iBAAS;AAC3BC,gCAAQC,GAAR,CAAYR,MAAMC,MAAN,CAAaQ,KAAzB;AACAhB,+BAAOO,MAAMC,MAAN,CAAaQ,KAAb,CAAmBC,IAA1B;AACH,qBAHD;AAIH,iBAxBM,CAAP;AAyBH;AAhCL;AAAA;AAAA,yCAkCwBC,IAlCxB,EAkC8B;AACtB1B,gCAAgB2B,OAAhB,CAAwB,gBAAQ;AAC5B,wBAAID,KAAKE,gBAAL,CAAsBC,QAAtB,CAA+BC,IAA/B,CAAJ,EAA0C;AACtCJ,6BAAKK,iBAAL,CAAuBD,IAAvB;AACH;;AAEDJ,yBAAKM,iBAAL,CAAuBF,IAAvB,EAA6B,EAAEG,eAAe,IAAjB,EAA7B;AACH,iBAND;AAOH;AA1CL;AAAA;AAAA,wCA4CuB;AACf,oBAAI9B,UAAJ,EAAgB;AACZC;AACH;AACJ;AAhDL;;AAAA;AAAA;AAkDH,CA3DuB,EAAxB","file":"ConnectionFactory.js","sourcesContent":["var ConnectionFactory = (function() {\r\n\r\n    const database_stores = ['trades'];\r\n    const database_version = 1;\r\n    const database_name = 'trade_system';\r\n\r\n    var connection = null;\r\n    var closeConnection = null;\r\n\r\n    return class ConnectionFactory {\r\n\r\n        constructor() {\r\n            throw new Error('Connection Factory cannot be instantiated!');\r\n        }\r\n\r\n        static getConn() {\r\n            return new Promise((resolve, reject) => {\r\n\r\n                let openRequest = window.indexedDB.open(database_name, database_version);\r\n\r\n                openRequest.onupgradeneeded = event => {\r\n                    ConnectionFactory._createStore(event.target.result);\r\n                };\r\n\r\n                openRequest.onsuccess = event => {\r\n                    if (!connection) {\r\n                        connection = event.target.result;\r\n                        closeConnection = connection.close.bind(connection);\r\n                        connection.close = function() {\r\n                            throw new Error('Cannot close connection!');\r\n                        }\r\n                    }\r\n\r\n                    resolve(connection);\r\n                };\r\n\r\n                openRequest.onerror = event => {\r\n                    console.log(event.target.error);\r\n                    reject(event.target.error.name);\r\n                };\r\n            });\r\n        }\r\n\r\n        static _createStore(conn) {\r\n            database_stores.forEach(item => {\r\n                if (conn.objectStoreNames.contains(item)) {\r\n                    conn.deleteObjectStore(item);\r\n                }\r\n\r\n                conn.createObjectStore(item, { autoIncrement: true });\r\n            });\r\n        }\r\n\r\n        static closeConn() {\r\n            if (connection) {\r\n                closeConnection();\r\n            }\r\n        }\r\n    }\r\n})();"]}