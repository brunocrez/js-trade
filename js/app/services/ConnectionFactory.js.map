{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["database_stores","database_version","database_name","connection","closeConnection","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStore","event","target","result","onsuccess","close","bind","onerror","console","log","error","name","conn","forEach","objectStoreNames","contains","item","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAMA,2B,GAAkB,CAAC,QAAD,C;AAClBC,4B,GAAmB,C;AACnBC,yB,GAAgB,c;AAElBC,sB,GAAa,I;AACbC,2B,GAAkB,I;;yCAETC,iB;AAET,6CAAc;AAAA;;AACV,0BAAM,IAAIC,KAAJ,CAAU,4CAAV,CAAN;AACH;;;;8CAEgB;AACb,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,gCAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBX,aAAtB,EAAqCD,gBAArC,CAAlB;;AAEAS,wCAAYI,eAAZ,GAA8B,iBAAS;AACnCT,kDAAkBU,YAAlB,CAA+BC,MAAMC,MAAN,CAAaC,MAA5C;AACH,6BAFD;;AAIAR,wCAAYS,SAAZ,GAAwB,iBAAS;AAC7B,oCAAI,CAAChB,UAAL,EAAiB;AACbA,iDAAaa,MAAMC,MAAN,CAAaC,MAA1B;AACAd,sDAAkBD,WAAWiB,KAAX,CAAiBC,IAAjB,CAAsBlB,UAAtB,CAAlB;AACAA,+CAAWiB,KAAX,GAAmB,YAAW;AAC1B,8CAAM,IAAId,KAAJ,CAAU,0BAAV,CAAN;AACH,qCAFD;AAGH;;AAEDE,wCAAQL,UAAR;AACH,6BAVD;;AAYAO,wCAAYY,OAAZ,GAAsB,iBAAS;AAC3BC,wCAAQC,GAAR,CAAYR,MAAMC,MAAN,CAAaQ,KAAzB;AACAhB,uCAAOO,MAAMC,MAAN,CAAaQ,KAAb,CAAmBC,IAA1B;AACH,6BAHD;AAIH,yBAxBM,CAAP;AAyBH;;;iDAEmBC,I,EAAM;AACtB3B,wCAAgB4B,OAAhB,CAAwB,gBAAQ;AAC5B,gCAAID,KAAKE,gBAAL,CAAsBC,QAAtB,CAA+BC,IAA/B,CAAJ,EAA0C;AACtCJ,qCAAKK,iBAAL,CAAuBD,IAAvB;AACH;;AAEDJ,iCAAKM,iBAAL,CAAuBF,IAAvB,EAA6B,EAAEG,eAAe,IAAjB,EAA7B;AACH,yBAND;AAOH;;;gDAEkB;AACf,4BAAI/B,UAAJ,EAAgB;AACZC;AACH;AACJ","file":"ConnectionFactory.js","sourcesContent":["const database_stores = ['trades'];\r\nconst database_version = 1;\r\nconst database_name = 'trade_system';\r\n\r\nlet connection = null;\r\nlet closeConnection = null;\r\n\r\nexport class ConnectionFactory {\r\n\r\n    constructor() {\r\n        throw new Error('Connection Factory cannot be instantiated!');\r\n    }\r\n\r\n    static getConn() {\r\n        return new Promise((resolve, reject) => {\r\n\r\n            let openRequest = window.indexedDB.open(database_name, database_version);\r\n\r\n            openRequest.onupgradeneeded = event => {\r\n                ConnectionFactory._createStore(event.target.result);\r\n            };\r\n\r\n            openRequest.onsuccess = event => {\r\n                if (!connection) {\r\n                    connection = event.target.result;\r\n                    closeConnection = connection.close.bind(connection);\r\n                    connection.close = function() {\r\n                        throw new Error('Cannot close connection!');\r\n                    }\r\n                }\r\n\r\n                resolve(connection);\r\n            };\r\n\r\n            openRequest.onerror = event => {\r\n                console.log(event.target.error);\r\n                reject(event.target.error.name);\r\n            };\r\n        });\r\n    }\r\n\r\n    static _createStore(conn) {\r\n        database_stores.forEach(item => {\r\n            if (conn.objectStoreNames.contains(item)) {\r\n                conn.deleteObjectStore(item);\r\n            }\r\n\r\n            conn.createObjectStore(item, { autoIncrement: true });\r\n        });\r\n    }\r\n\r\n    static closeConn() {\r\n        if (connection) {\r\n            closeConnection();\r\n        }\r\n    }\r\n}"]}